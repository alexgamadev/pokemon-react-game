{"version":3,"sources":["Components/ScoreCounter/ScoreCounter.module.css","Components/GenerationPicker/GenerationPicker.module.css","Assets/Regions/Johto.svg","Assets/Regions/index.js","Assets/Regions/Kanto.svg","Assets/Regions/Hoenn.svg","Assets/Regions/Sinnoh.svg","Assets/Regions/Unova.svg","Assets/Regions/Kalos.svg","Assets/Regions/Alola.svg","Assets/Regions/Galar.svg","Components/GenerationSelect/index.js","Components/GenerationPicker/index.js","Components/ScoreCounter/index.js","Assets/Types/index.js","Assets/Types/bug.svg","Assets/Types/dark.svg","Assets/Types/dragon.svg","Assets/Types/electric.svg","Assets/Types/fairy.svg","Assets/Types/fighting.svg","Assets/Types/fire.svg","Assets/Types/flying.svg","Assets/Types/ghost.svg","Assets/Types/grass.svg","Assets/Types/ground.svg","Assets/Types/ice.svg","Assets/Types/normal.svg","Assets/Types/poison.svg","Assets/Types/psychic.svg","Assets/Types/rock.svg","Assets/Types/steel.svg","Assets/Types/water.svg","Components/PokemonCard/index.js","Components/GameoverModal/index.js","Components/CardDisplay/index.js","Utils/ArrayUtils.js","CustomHooks/useCardBuffer.js","CustomHooks/useSpecies.js","CustomHooks/usePokeAPI.js","CustomHooks/useGenerations.js","CustomHooks/useCards.js","CustomHooks/useGameTracker.js","CustomHooks/useHighscores.js","CustomHooks/useGame.js","Components/App/index.js","index.js","Components/PokemonCard/PokemonCard.module.css","Components/App/App.module.css","Components/GenerationSelect/GenerationSelect.module.css","Components/CardDisplay/CardDisplay.module.css"],"names":["module","exports","regionImages","Johto","GenerationSelect","props","Card","className","styles","margin","card","raised","src","generation","id","wrapped","ui","alt","main_region","name","Content","textAlign","highscore","extra","isStarted","Button","onClick","startGame","positive","GenerationPicker","genSelected","onGenChanged","slidesPerPage","clickToChange","centered","onChange","e","data","map","index","onClicked","getHighscore","ScoreCounter","container","isLoaded","Statistic","label","value","currScore","remainingScore","types","sprite","color","PokemonCard","mainTypeColor","type","style","backgroundColor","header","image","imageSrc","footer","Icons","icons","obj","typeIcon","typeImg","Description","description","NameAndTypes","footerHead","toUpperCase","GameoverModal","Modal","onClose","resetGame","score","open","isGameOver","closeOnEscape","closeOnDimmerClick","Header","Actions","content","labelPosition","icon","CardDisplay","onClickCard","displayContainer","cardsDisplay","buffer","length","Dimmer","active","Loader","shuffleArray","array","i","j","Math","floor","random","useCardBuffer","useRef","cards","console","log","forEach","current","push","quantity","splice","useSpecies","useState","species","setSpecies","useCallback","generationData","selectedGen","speciesArr","pokemon_species","a","fetch","response","ok","json","Error","usePokeAPI","endpoint","setData","isLoading","setIsLoading","useEffect","dataResponse","fetchData","useGenerations","setGenerationData","setSelectedGen","gensLoading","gens","genData","Promise","all","results","gen","loadGenerationData","url","sort","b","initGenerations","useCards","loadCards","loadSpeciesData","pokemon","speciesData","loadPokemonData","varieties","pokemonData","createCard","selected","sprites","other","front_default","preloadImage","flavor_text_entries","find","flavor_text","language","resolve","img","Image","onload","useGameTracker","unSelected","setScore","remaining","setRemaining","initUnselected","temp","shiftUnselected","newCards","scoreDiff","remainDiff","useHighscores","window","localStorage","getItem","setItem","clear","useGame","speciesList","refreshSpecies","queueCards","shiftCards","setHighscore","addUnselected","addSelected","shiftSelected","resetTrackers","setIsLoaded","setIsStarted","isProcessing","setIsProcessing","displayList","setDisplayList","isGameover","setGameover","initBuffer","queueLoadedCards","filter","pass","fail","idx","arr","partition","shiftCard","newUnselect","newSelect","App","clickCard","title","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be48d3a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ScoreCounter_container__uY19P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GenerationPicker_container__1XJTz\",\"genImage\":\"GenerationPicker_genImage__svoNz\"};","export default __webpack_public_path__ + \"static/media/Johto.8f4f72b9.svg\";","import Johto from './Johto.svg';\r\nimport Kanto from './Kanto.svg';\r\nimport Hoenn from './Hoenn.svg';\r\nimport Sinnoh from './Sinnoh.svg';\r\nimport Unova from './Unova.svg';\r\nimport Kalos from './Kalos.svg';\r\nimport Alola from './Alola.svg';\r\nimport Galar from './Galar.svg';\r\n\r\nlet regionImages = [\r\n    Kanto,\r\n    Johto,\r\n    Hoenn,\r\n    Sinnoh,\r\n    Unova,\r\n    Kalos,\r\n    Alola,\r\n    Galar,\r\n];\r\n\r\nexport default regionImages;","export default __webpack_public_path__ + \"static/media/Kanto.15ce24f6.svg\";","export default __webpack_public_path__ + \"static/media/Hoenn.58ffaee0.svg\";","export default __webpack_public_path__ + \"static/media/Sinnoh.cb1e26f4.svg\";","export default __webpack_public_path__ + \"static/media/Unova.e528992a.svg\";","export default __webpack_public_path__ + \"static/media/Kalos.a1f41dc9.svg\";","export default __webpack_public_path__ + \"static/media/Alola.3cc9cbf5.svg\";","export default __webpack_public_path__ + \"static/media/Galar.77ca1589.svg\";","import React from 'react';\r\nimport styles from './GenerationSelect.module.css';\r\nimport regionImages from '../../Assets/Regions';\r\nimport { Card, Image, Button } from 'semantic-ui-react'\r\n\r\nconst GenerationSelect = (props) => {\r\n    return (\r\n        <Card className={`${styles.margin} ${styles.card}`} raised={true}>\r\n            <Image src={regionImages[props.generation?.id - 1]} wrapped ui={false} alt={props.generation?.main_region.name}/>\r\n            <Card.Content textAlign=\"left\">\r\n                <h3>Highest score: {props.highscore}</h3>\r\n                \r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                {!props.isStarted && (<Button onClick={props.startGame} positive>Start Game</Button>)}\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default GenerationSelect;","import React from 'react';\r\nimport styles from './GenerationPicker.module.css';\r\nimport GenerationSelect from '../GenerationSelect/index.js';\r\nimport Carousel from '@brainhubeu/react-carousel';\r\nimport '@brainhubeu/react-carousel/lib/style.css';\r\n\r\n\r\nconst GenerationPicker = (props) => {\r\n    const genSelected = (id) => {\r\n        props.onGenChanged(id);\r\n    }\r\n\r\n    return (\r\n        <Carousel\r\n            slidesPerPage={4}\r\n            clickToChange\r\n            centered\r\n            onChange={e => genSelected(e+1)}\r\n        >\r\n            {props.data?.map((generation, index) => <GenerationSelect \r\n            key={generation.name} \r\n            generation={generation} \r\n            onClicked={genSelected} \r\n            isStarted={props.isStarted} \r\n            startGame={props.startGame} \r\n            highscore={props.getHighscore(generation.id)}/>)\r\n            }\r\n        </Carousel>\r\n    );\r\n}\r\n\r\nexport default GenerationPicker;","import React from 'react';\r\nimport styles from './ScoreCounter.module.css';\r\nimport { Statistic } from 'semantic-ui-react';\r\n\r\nconst ScoreCounter = (props) => {\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {props.isLoaded && ( \r\n                <>\r\n                    <Statistic label='Score' value={props.currScore} />\r\n                    <Statistic label='Remaining' value={props.remainingScore} />\r\n                </>\r\n            )}\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default ScoreCounter;","import bug from './bug.svg';\r\nimport dark from './dark.svg';\r\nimport dragon from './dragon.svg';\r\nimport electric from './electric.svg';\r\nimport fairy from './fairy.svg';\r\nimport fighting from './fighting.svg';\r\nimport fire from './fire.svg';\r\nimport flying from './flying.svg';\r\nimport ghost from './ghost.svg';\r\nimport grass from './grass.svg';\r\nimport ground from './ground.svg';\r\nimport ice from './ice.svg';\r\nimport normal from './normal.svg';\r\nimport poison from './poison.svg';\r\nimport psychic from './psychic.svg';\r\nimport rock from './rock.svg';\r\nimport steel from './steel.svg';\r\nimport water from './water.svg';\r\n\r\nconst types = {\r\n    \"bug\": {\r\n        sprite: bug,\r\n        color: \"#92BC2C\",\r\n    },\r\n    \"dark\": {\r\n        sprite: dark,\r\n        color: \"#595761\",\r\n    },\r\n    \"dragon\": {\r\n        sprite: dragon,\r\n        color: \"#0C69C8\",\r\n    },\r\n    \"electric\": {\r\n        sprite: electric,\r\n        color: \"#F2D94E\",\r\n    },\r\n    \"fairy\": {\r\n        sprite: fairy,\r\n        color: \"#EE90E6\",\r\n    },\r\n    \"fighting\": {\r\n        sprite: fighting,\r\n        color: \"#D3425F\",\r\n    },\r\n    \"fire\": {\r\n        sprite: fire,\r\n        color: \"#FBA54C\",\r\n    },\r\n    \"flying\": {\r\n        sprite: flying,\r\n        color: \"#A1BBEC\",\r\n    },\r\n    \"ghost\": {\r\n        sprite: ghost,\r\n        color: \"#5F6DBC\",\r\n    },\r\n    \"grass\": {\r\n        sprite: grass,\r\n        color: \"#5FBD58\",\r\n    },\r\n    \"ground\": {\r\n        sprite: ground,\r\n        color: \"#DA7C4D\",\r\n    },\r\n    \"ice\": {\r\n        sprite: ice,\r\n        color: \"#75D0C1\",\r\n    },\r\n    \"normal\": {\r\n        sprite: normal,\r\n        color: \"#A0A29F\",\r\n    },\r\n    \"poison\": {\r\n        sprite: poison,\r\n        color: \"#B763CF\",\r\n    },\r\n    \"psychic\": {\r\n        sprite: psychic,\r\n        color: \"#FA8581\",\r\n    },\r\n    \"rock\": {\r\n        sprite: rock,\r\n        color: \"#C9BB8A\",\r\n    },\r\n    \"steel\": {\r\n        sprite: steel,\r\n        color: \"#5695A3\",\r\n    },\r\n    \"water\": {\r\n        sprite: water,\r\n        color: \"#539DDF\",\r\n    },\r\n}\r\n\r\nexport default types;\r\n","export default __webpack_public_path__ + \"static/media/bug.204df919.svg\";","export default __webpack_public_path__ + \"static/media/dark.27fdc7ed.svg\";","export default __webpack_public_path__ + \"static/media/dragon.9d32757b.svg\";","export default __webpack_public_path__ + \"static/media/electric.bc35c5a3.svg\";","export default __webpack_public_path__ + \"static/media/fairy.767c2f56.svg\";","export default __webpack_public_path__ + \"static/media/fighting.f20d1bd2.svg\";","export default __webpack_public_path__ + \"static/media/fire.e0bd7fca.svg\";","export default __webpack_public_path__ + \"static/media/flying.d1778503.svg\";","export default __webpack_public_path__ + \"static/media/ghost.ddf26831.svg\";","export default __webpack_public_path__ + \"static/media/grass.e09623e3.svg\";","export default __webpack_public_path__ + \"static/media/ground.e567f4fc.svg\";","export default __webpack_public_path__ + \"static/media/ice.cd2f9043.svg\";","export default __webpack_public_path__ + \"static/media/normal.2ba66dd5.svg\";","export default __webpack_public_path__ + \"static/media/poison.43956925.svg\";","export default __webpack_public_path__ + \"static/media/psychic.67439878.svg\";","export default __webpack_public_path__ + \"static/media/rock.61a8428d.svg\";","export default __webpack_public_path__ + \"static/media/steel.cb91a92a.svg\";","export default __webpack_public_path__ + \"static/media/water.b6d13329.svg\";","import styles from './PokemonCard.module.css';\r\nimport types from '../../Assets/Types';\r\n\r\nconst PokemonCard = (props) => {\r\n    const {card} = props;\r\n    const mainTypeColor = types[card?.types[0]?.type.name]?.color;\r\n\r\n    return (\r\n        card ? \r\n            (<div className={styles.container} style={mainTypeColor ? {backgroundColor: `${mainTypeColor}99`} : null} onClick={(e) => props.onClick(e, card)}>\r\n                <header className={styles.header}>\r\n                    <span className={styles.id}>{card?.id}</span>\r\n                </header>\r\n                <img className={styles.image}  alt={card?.name} src={card?.imageSrc} />\r\n                <footer className={styles.footer}>\r\n                    <NameAndTypes card={card} />\r\n                    <Description card={card} />\r\n                </footer>\r\n            </div>) : null\r\n    );\r\n};\r\n\r\nexport default PokemonCard;\r\n\r\nconst Icons = (props) => {\r\n    const {card} = props;\r\n\r\n    return (\r\n        <div className={styles.icons}>\r\n            {card?.types.map((obj, index) => {\r\n                return (\r\n                <div className={`${styles.typeIcon} ${styles[obj.type.name]}`} key={`${card?.id}-${index}`}>\r\n                    <img className={styles.typeImg} key={`${card?.id}-${index}`} alt={obj.type.name} src={types[obj.type.name].sprite} />\r\n                </div>);\r\n            })} \r\n        </div>\r\n    );\r\n}\r\n\r\nconst Description = (props) => {\r\n    const {card} = props;\r\n    return (\r\n        <div>\r\n            {card?.description}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst NameAndTypes = (props) => {\r\n    const {card} = props;\r\n    return (\r\n        <div className={styles.footerHead}>\r\n            <span className={styles.name}>{card?.name.toUpperCase()}</span>\r\n            <Icons card={card}/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Button, Header, Modal } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst GameoverModal = (props) => {\r\n    return (\r\n    <Modal\r\n      onClose={() => props.resetGame(props.score)}\r\n      open={props.isGameOver}\r\n      closeOnEscape={false}\r\n      closeOnDimmerClick={false}\r\n    >\r\n      <Modal.Header>Game Over!</Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Header>You got a score of: {props.score}</Header>\r\n          {(props.score > props.highscore) ? \r\n            (<p>New Highscore!</p>) :\r\n            (<p>You were {props.highscore - props.score} cards off your highscore.</p>)\r\n          }\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button\r\n          content=\"Continue\"\r\n          labelPosition='right'\r\n          icon='checkmark'\r\n          onClick={() => props.resetGame(props.score)}\r\n          positive\r\n        />\r\n      </Modal.Actions>\r\n    </Modal>\r\n    );\r\n}\r\n\r\nexport default GameoverModal;","import PokemonCard from '../PokemonCard';\r\nimport styles from './CardDisplay.module.css';\r\nimport GameoverModal from '../GameoverModal';\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\nconst CardDisplay = (props) => {\r\n\r\n    const onClickCard = (e, card) => {\r\n        props.onClick(card);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.displayContainer}>\r\n                <div className={styles.cardsDisplay}>\r\n                    {props.buffer?.length > 0 ?\r\n                        props.buffer.map((card) => <PokemonCard key={card.name} card={card} onClick={onClickCard}/>) :\r\n                        (<Dimmer active>\r\n                            <Loader />\r\n                         </Dimmer>)\r\n                    }\r\n                </div>\r\n            </div>\r\n            <GameoverModal isGameOver={props.isGameOver} resetGame={props.resetGame} score={props.score} highscore={props.highscore}/>\r\n        </>\r\n    );\r\n}\r\nexport default CardDisplay;","export const shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n}\r\n\r\nexport function partition(array, filter) {\r\n    let pass = [], fail = [];\r\n    array.forEach((e, idx, arr) => (filter(e, idx, arr) ? pass : fail).push(e));\r\n    return [pass, fail];\r\n}","import {useRef} from 'react';\r\n\r\nconst useCardBuffer = () => {\r\n    const buffer = useRef([]);\r\n\r\n    const queueCards = (cards) => {\r\n      console.log(\"Queue\", cards);\r\n      cards.forEach((card) => {\r\n        buffer.current.push(card);\r\n      })\r\n    }\r\n\r\n    const shiftCards = (quantity) => {\r\n      if(buffer.length < quantity) {\r\n        return null;\r\n      }\r\n\r\n      return buffer.current.splice(0, quantity);\r\n    }\r\n    \r\n    return [queueCards, shiftCards, buffer];\r\n}\r\n\r\nexport default useCardBuffer;","import { useCallback, useState } from \"react\";\r\n\r\nconst useSpecies = () => {\r\n    const [species, setSpecies] = useState(null);\r\n\r\n    const refreshSpecies = useCallback((generationData, selectedGen) => {\r\n        if(generationData) {\r\n            const speciesArr = [];\r\n            generationData[selectedGen-1]?.pokemon_species.map((species) => speciesArr.push(species.name));\r\n            setSpecies(speciesArr);\r\n        }\r\n    }, []);\r\n\r\n    const loadSpeciesData = async (name) => {\r\n        try {\r\n            const response = await fetch(`https://pokeapi.co/api/v2/pokemon-species/${name}/`);\r\n            if(response.ok) {\r\n                return await response?.json();\r\n            } else {\r\n                throw Error(\"404 - Couldn't find data or connect to API\")\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return [species, refreshSpecies, loadSpeciesData];\r\n}\r\n\r\nexport default useSpecies;","import {useState, useEffect} from 'react';\r\n\r\nconst usePokeAPI = (endpoint, id = null) => {\r\n    const [data, setData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                const response = await fetch(`https://pokeapi.co/api/v2/${endpoint}/${id ? id + \"/\" : \"\"}`);\r\n                if(response.ok) {\r\n                    const dataResponse = await response?.json();\r\n                    setData(dataResponse);\r\n                    setIsLoading(false);\r\n                } else {\r\n                    throw Error(\"404 - Couldn't find data or connect to API\")\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetchData();\r\n\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return [data, isLoading];\r\n}\r\n\r\nexport default usePokeAPI;","import {useEffect, useState} from 'react';\r\nimport usePokeAPI from './usePokeAPI';\r\n\r\nconst useGenerations = () => {\r\n    const [generationData, setGenerationData] = useState(null);\r\n    const [selectedGen, setSelectedGen] = useState(null);\r\n    const [data, gensLoading] = usePokeAPI('generation');\r\n\r\n    //Fetch generation data on mount\r\n    useEffect(() => {\r\n        const initGenerations = async (gens) => {\r\n            const genData = [];\r\n            await Promise.all(gens?.results?.map(async (gen) => {\r\n                genData.push(await loadGenerationData(gen.url));\r\n            }));\r\n    \r\n            setSelectedGen(1);\r\n            genData.sort((a, b) => a.id - b.id);\r\n            setGenerationData(genData);\r\n        }\r\n        \r\n        if(!gensLoading) {\r\n            initGenerations(data);\r\n        }\r\n    }, [gensLoading, data]);\r\n\r\n    const loadGenerationData = async (url) => {\r\n        try {\r\n            const response = await fetch(url);\r\n            if(response.ok) {\r\n                const data = await response?.json();\r\n                return data;\r\n            } else {\r\n                throw Error(\"Can't get generation data\");\r\n            }\r\n        } catch(error) {\r\n            return error;\r\n        }\r\n    }\r\n    \r\n    return [setSelectedGen, selectedGen, generationData];\r\n}\r\n\r\nexport default useGenerations;","const useCards = () => {\r\n    const loadCards = async (species, loadSpeciesData) => {\r\n        console.log(species);\r\n        const cards = await Promise.all(species.map(async (pokemon) => {\r\n            const speciesData = await loadSpeciesData(pokemon.name);\r\n            const pokemonData = await loadPokemonData(speciesData.varieties[0].pokemon.name);\r\n            \r\n            return await createCard(speciesData, pokemonData, pokemon.selected);\r\n        }));\r\n\r\n        return cards;\r\n    }\r\n\r\n    const createCard = async (speciesData, pokemonData, selected) => {\r\n        const card = {};\r\n        card.name = pokemonData.name;\r\n        card.id = pokemonData.id;\r\n        card.types = pokemonData.types;\r\n        const imageSrc = pokemonData.sprites.other[\"official-artwork\"].front_default;\r\n        card.imageSrc = imageSrc;\r\n        card.species = speciesData.name;\r\n        await preloadImage(imageSrc);\r\n        card.description = speciesData.flavor_text_entries.find(flavor_text => flavor_text.language.name === \"en\").flavor_text;\r\n        card.selected = selected;\r\n        return card;\r\n    }\r\n\r\n    const loadPokemonData = async (name) => {\r\n        try {\r\n            const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${name}/`);\r\n            if(response.ok) {\r\n                return await response?.json();\r\n            } else {\r\n                throw Error(\"404 - Couldn't find data or connect to API\")\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const preloadImage = async (url) => {\r\n        new Promise(resolve => {\r\n            const img = new Image();\r\n            img.src = url;\r\n            img.onload = resolve();\r\n        });\r\n        \r\n    }\r\n\r\n    return [ loadCards ];\r\n}\r\n\r\nexport default useCards;","import { useState, useRef, useCallback } from \"react\";\r\nimport { shuffleArray } from '../Utils/ArrayUtils';\r\n\r\nconst useGameTracker = () => {\r\n    const unSelected = useRef([]);\r\n    const selected = useRef([]);\r\n    const [score, setScore] = useState(0);\r\n    const [remaining, setRemaining] = useState(0);\r\n\r\n    const addSelected = (cards) => {\r\n        let scoreDiff = 0;\r\n        let remainDiff = 0;\r\n\r\n        cards.forEach((card) => {\r\n            if(!card.selected) {\r\n                scoreDiff++;\r\n                remainDiff++;\r\n                card.selected = true;\r\n            }\r\n            \r\n            selected.current.push(card);\r\n        });\r\n\r\n        setScore(score => score + scoreDiff);\r\n        setRemaining(remaining => remaining - remainDiff);\r\n    }\r\n\r\n    const percentageScore = () => {\r\n        return (score/remaining) * 100;\r\n    }\r\n\r\n    const initUnselected = useCallback((speciesArr) => {\r\n        let temp = speciesArr.map((species) => ({name: species, selected: false}));\r\n        unSelected.current = [...temp];\r\n        setRemaining(speciesArr.length);\r\n        setScore(0);\r\n    }, []);\r\n\r\n    const shiftSelected = (quantity) => {\r\n        let temp = [...selected.current];\r\n        shuffleArray(temp);\r\n        const newCards = temp.splice(0, quantity);\r\n\r\n        selected.current = temp;\r\n        \r\n        return newCards;\r\n    }\r\n\r\n    const shiftUnselected = useCallback((quantity) => {\r\n        let temp = [...unSelected.current];\r\n        shuffleArray(temp);\r\n        const newCards = temp.splice(0, quantity);\r\n        unSelected.current = temp;\r\n\r\n        return newCards;\r\n    }, []);\r\n\r\n    const addUnselected = (cards) => {\r\n        cards.forEach((card) => unSelected.current.push(card));\r\n    }\r\n\r\n    const resetTrackers = () => {\r\n        selected.current = [];\r\n        unSelected.current = [];\r\n        setScore(0);\r\n        setRemaining(0);\r\n    }\r\n\r\n    //Load unSelected pokemon from species list\r\n    //Set remaining to unSelected length\r\n    //Load 20 cards from unSelected to the buffer\r\n    //Everytime a card is moved from the buffer to Selected, add 1 to score\r\n    //Buffer adds remaining cards from \r\n\r\n    return [\r\n        unSelected,\r\n        selected,\r\n        initUnselected,\r\n        addUnselected,\r\n        addSelected,\r\n        shiftUnselected,\r\n        shiftSelected,\r\n        score,\r\n        remaining,\r\n        percentageScore,\r\n        resetTrackers,\r\n    ];\r\n}\r\n\r\nexport default useGameTracker;","const useHighscores = () => {\r\n    const setHighscore = (generation, score) => {\r\n        const oldHighscore = window.localStorage.getItem(generation);\r\n        if(score > oldHighscore) {\r\n            window.localStorage.setItem(generation, score);\r\n        }\r\n    }\r\n\r\n    const getHighscore = (generation) => {\r\n        const highscore = window.localStorage.getItem(generation);\r\n        if(highscore > 0) {\r\n            return highscore;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    const clearHighscores = () => {\r\n        window.localStorage.clear();\r\n    }\r\n\r\n    return [setHighscore, getHighscore, clearHighscores];\r\n}\r\n\r\nexport default useHighscores;","import { useCallback, useEffect, useState } from 'react';\r\nimport { partition, shuffleArray } from '../Utils/ArrayUtils';\r\nimport useCardBuffer from './useCardBuffer';\r\nimport useSpecies from './useSpecies';\r\nimport useGenerations from './useGenerations';\r\nimport useCards from './useCards';\r\nimport useGameTracker from './useGameTracker';\r\nimport useHighscores from './useHighscores';\r\n\r\nconst BUFFER_SIZE = 20;\r\n\r\nconst useGame = () => {\r\n    //Custom \"hooks\"\r\n    const [setSelectedGen, selectedGen, generationData] = useGenerations();\r\n    const [speciesList, refreshSpecies, loadSpeciesData] = useSpecies();\r\n    const [queueCards, shiftCards, buffer] = useCardBuffer();\r\n    const [loadCards] = useCards();\r\n    const [setHighscore, getHighscore] = useHighscores();\r\n     //Change to use reducer if have time\r\n     const [\r\n        unSelected,\r\n        selected,\r\n        initUnselected,\r\n        addUnselected,\r\n        addSelected,\r\n        shiftUnselected,\r\n        shiftSelected,\r\n        score,\r\n        remaining,\r\n        percentageScore,\r\n        resetTrackers,\r\n    ] = useGameTracker();\r\n\r\n    //Change to use reducer if have time\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [isStarted, setIsStarted] = useState(false);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [displayList, setDisplayList] = useState([]);\r\n    const [isGameover, setGameover] = useState(false);\r\n\r\n    const initBuffer = useCallback(async (newCards) => {\r\n        queueCards(await loadCards(newCards, loadSpeciesData));\r\n        setIsLoaded(true);\r\n        setIsProcessing(false);\r\n    }, [loadCards, loadSpeciesData, queueCards]);\r\n\r\n    //Initialise Unselected\r\n    useEffect(() => {\r\n        if(speciesList?.length > 0) {\r\n            initUnselected(speciesList);\r\n        }\r\n    }, [speciesList, initUnselected]);\r\n\r\n    //Initialise card buffer\r\n    useEffect(() => {\r\n        if(isStarted && !isLoaded && !isProcessing) {\r\n            setIsProcessing(true);\r\n            if(unSelected?.current.length >= BUFFER_SIZE) {\r\n                const newCards = shiftUnselected(20);\r\n                (async () => {\r\n                    await initBuffer(newCards);\r\n                })();\r\n            } else {\r\n                setIsProcessing(false);\r\n            }\r\n        }    \r\n    }, [unSelected, isStarted, isLoaded, isProcessing, initBuffer, shiftUnselected]);\r\n\r\n    //Update display list\r\n    useEffect(() => {\r\n        if(isStarted && isLoaded && displayList?.length <= 0) {\r\n            \r\n            //Load display list\r\n            setDisplayList(shiftCards(4));\r\n\r\n            //Load new elements from unselected to buffer\r\n            if(displayList?.length >= 4)\r\n            {\r\n                const newCards = shiftUnselected(4);\r\n                queueLoadedCards(newCards);\r\n            }\r\n            \r\n        }\r\n    }, [isStarted, isLoaded, shiftCards, shiftUnselected, queueCards, displayList, loadSpeciesData]);\r\n\r\n    const startGame = () => {\r\n        buffer.current = [];\r\n        setIsStarted(true);\r\n        refreshSpecies(generationData, selectedGen);\r\n    }\r\n\r\n    const resetGame = (score = null) => {\r\n        //Clear buffer\r\n        buffer.current = [];\r\n        //Clear unselected, selected, score and remaining\r\n        resetTrackers();\r\n        //Clear display list\r\n        setDisplayList([]);\r\n        //Set isProcessing, isStarted abd isLoaded to false\r\n        setIsLoaded(false);\r\n        setIsProcessing(false);\r\n        setIsStarted(false);\r\n        setGameover(false);\r\n        if(score != null) {\r\n            setHighscore(selectedGen, score);\r\n        }    \r\n    }\r\n\r\n    const queueLoadedCards = async (newCards) => {\r\n        const cards = await loadCards(newCards, loadSpeciesData);\r\n        if(isStarted) {\r\n            queueCards(cards);\r\n        }\r\n    }\r\n\r\n    const clickCard = (card) => {\r\n        //Shift 4 cards off buffer\r\n        const shiftedCards = displayList;\r\n\r\n        //Add non selected cards back to unselected\r\n        const [newUnselect, newSelect] = partition(shiftedCards, (shiftCard => shiftCard.species !== card.species && shiftCard.selected !== true));\r\n\r\n        //Check for gameover\r\n        if(card.selected) {\r\n            //resetGame();\r\n            setGameover(true);\r\n        } else {\r\n            addSelected(newSelect.map((card) => ({name: card.species, selected: card.selected})));\r\n            addUnselected(newUnselect.map((card) => ({name: card.species, selected: false})));\r\n            setDisplayList(shiftCards(4));\r\n\r\n            //Load new elements from unselected to buffer\r\n            let newCards = [];\r\n            if(selected?.current.length > 0) {\r\n                newCards = shiftUnselected(3);\r\n                newCards.push(...shiftSelected(1));\r\n            } else {\r\n                newCards = shiftUnselected(4);\r\n            }\r\n\r\n            shuffleArray(newCards);\r\n            \r\n            queueLoadedCards(newCards);\r\n        }\r\n    }\r\n\r\n    return [\r\n        score,\r\n        remaining,\r\n        setSelectedGen,\r\n        selectedGen,\r\n        generationData,\r\n        isLoaded,\r\n        clickCard,\r\n        displayList,\r\n        startGame,\r\n        isStarted,\r\n        isGameover,\r\n        resetGame,\r\n        getHighscore,\r\n    ];\r\n}\r\n\r\nexport default useGame;","import styles from './App.module.css';\nimport GenerationPicker from '../GenerationPicker';\nimport ScoreCounter from '../ScoreCounter';\nimport CardDisplay from '../CardDisplay';\nimport useGame from '../../CustomHooks/useGame';\n\nfunction App() {\n  const [\n    score,\n    remaining,\n    setSelectedGen,\n    selectedGen,\n    generationData,\n    isLoaded,\n    clickCard,\n    displayList,\n    startGame,\n    isStarted,\n    isGameover,\n    resetGame,\n    getHighscore,\n  ] = useGame();\n\n\n  return (\n    <>\n      <header className={styles.header}>\n        <div className={styles.title} onClick={() => {if(isStarted){resetGame()}}}>Pokemon Memory Game</div>\n      </header>\n      <div className={styles.app}>\n        {!isStarted && <GenerationPicker data={generationData} onGenChanged={setSelectedGen} selectedGen={selectedGen} isStarted={isStarted} startGame={startGame} getHighscore={getHighscore}/>}\n        {isStarted && \n          (\n            <div>\n              <ScoreCounter currScore={score} remainingScore={remaining} isLoaded={isLoaded}/>\n              <CardDisplay buffer={displayList} onClick={clickCard} isGameOver={isGameover} resetGame={resetGame} score={score} highscore={getHighscore(selectedGen)}/>\n            </div>\n          )\n        }\n        \n      </div>\n    </>\n      \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PokemonCard_container__3eYA4\",\"image\":\"PokemonCard_image__3iPS-\",\"id\":\"PokemonCard_id__2xdYq\",\"name\":\"PokemonCard_name__3qqJ6\",\"footerHead\":\"PokemonCard_footerHead__GWjxz\",\"icons\":\"PokemonCard_icons__1CBvA\",\"header\":\"PokemonCard_header__1V88F\",\"footer\":\"PokemonCard_footer__1_BBA\",\"typeIcon\":\"PokemonCard_typeIcon__2VJDD\",\"typeImg\":\"PokemonCard_typeImg__13EEF\",\"bug\":\"PokemonCard_bug__2UGT0\",\"dark\":\"PokemonCard_dark__lCYTc\",\"dragon\":\"PokemonCard_dragon__2Yokc\",\"electric\":\"PokemonCard_electric__3pX2j\",\"fire\":\"PokemonCard_fire__XaIKP\",\"fairy\":\"PokemonCard_fairy__D3Qzn\",\"fighting\":\"PokemonCard_fighting__pA7nF\",\"flying\":\"PokemonCard_flying__3VwX5\",\"ghost\":\"PokemonCard_ghost__1khRN\",\"grass\":\"PokemonCard_grass__YviM3\",\"ground\":\"PokemonCard_ground__2ArXG\",\"ice\":\"PokemonCard_ice__2Nxcb\",\"normal\":\"PokemonCard_normal__D9u5P\",\"poison\":\"PokemonCard_poison__peo0m\",\"psychic\":\"PokemonCard_psychic__xzuST\",\"rock\":\"PokemonCard_rock__3v-uk\",\"steel\":\"PokemonCard_steel__24t3d\",\"water\":\"PokemonCard_water__3-vNt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1PPex\",\"header\":\"App_header__3x88n\",\"title\":\"App_title__3i-LQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"GenerationSelect_card__3umWE\",\"margin\":\"GenerationSelect_margin__3zMLW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hidden\":\"CardDisplay_hidden__1veZe\",\"cardsDisplay\":\"CardDisplay_cardsDisplay__15NNI\",\"displayContainer\":\"CardDisplay_displayContainer__1LZuP\"};"],"sourceRoot":""}